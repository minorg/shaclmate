@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix : <http://example.com/> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shaclmate: <http://purl.org/shaclmate/ontology#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://example.com/>
    shaclmate:tsFeatureExclude shaclmate:_TsFeature_Graphql ;
    shaclmate:tsFeatureInclude shaclmate:_TsFeatures_All ;
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Class ;
    a owl:Ontology .

:AbstractBaseClassForExternClass
    shaclmate:abstract true ;
    a owl:Class, sh:NodeShape ;
    rdfs:comment "An abstract base class that will be inherited by the extern object type, showing how to mix generated and hand-written code." ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :abstractBaseClassForExternClassProperty
    ] .

:AbstractBaseClassWithProperties
    shaclmate:abstract true ;
    shaclmate:identifierMintingStrategy shaclmate:_IdentifierMintingStrategy_SHA256 ;
    a owl:Class, sh:NodeShape ;
    rdfs:comment """Node shape that serves as an abstract base class for child node shapes.

It's marked abstract in TypeScript and not exported from the module.

Common pattern: put the minting strategy and nodeKind on an ABC.
""" ;
    sh:nodeKind sh:BlankNodeOrIRI ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :abstractBaseClassWithPropertiesProperty
    ] .

:AbstractBaseClassWithoutProperties
    shaclmate:abstract true ;
    a owl:Class, sh:NodeShape ;
    rdfs:comment "Abstract base for other node shapes. Put the ABC with properties above the ABC without." ;
    rdfs:subClassOf :AbstractBaseClassWithProperties .

:BaseInterfaceWithProperties
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a owl:Class, sh:NodeShape ;
    rdfs:comment "Base interface for other node shapes." ;
    sh:nodeKind sh:BlankNodeOrIRI ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :baseInterfaceWithPropertiesProperty
    ] .

:BaseInterfaceWithoutProperties
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a owl:Class, sh:NodeShape ;
    rdfs:comment "Base interface for other node shapes. Put the base interface with properties above the base interface without." ;
    rdfs:subClassOf :BaseInterfaceWithProperties .

:BlankClass
    a sh:NodeShape ;
    rdfs:comment "Node shape that can have a blank node or IRI as an identifier" .

:BlankInterface
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a sh:NodeShape ;
    rdfs:comment "Node shape that can have a blank node or IRI as an identifier" .

:ClassUnion
    a sh:NodeShape ;
    rdfs:comment "Node shape sh:xone's other node shapes. This will usually be generated as a discriminated union." ;
    sh:xone (:ClassUnionMember1
        :ClassUnionMember2
    ) .

:ClassUnionMember1
    a owl:Class, sh:NodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :classUnionMember1Property
    ] .

:ClassUnionMember2
    a owl:Class, sh:NodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :classUnionMember2Property
    ] .

:ConcreteChildClass
    a owl:Class, sh:NodeShape ;
    rdfs:comment "Child (class) of ConcreteParentClass. Should inherit properties, node kinds, and minting strategy." ;
    rdfs:subClassOf :ConcreteParentClass ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :concreteChildClassProperty
    ] .

:ConcreteChildInterface
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a owl:Class, sh:NodeShape ;
    rdfs:comment "Child interface of ConcreteParentInterface. Should inherit properties and node kinds." ;
    rdfs:subClassOf :ConcreteParentInterface ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :concreteChildInterfaceProperty
    ] .

:ConcreteParentClass
    a owl:Class, sh:NodeShape ;
    rdfs:comment "Class node shape that inherits the abstract base class and is the parent of the ConcreteChildClass." ;
    rdfs:subClassOf :AbstractBaseClassWithoutProperties ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :concreteParentClassProperty
    ] .

:ConcreteParentInterface
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a owl:Class, sh:NodeShape ;
    rdfs:comment "Interface node shape that inherits the base interface and is the parent of the ConcreteChildInterface." ;
    rdfs:subClassOf :BaseInterfaceWithoutProperties ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :concreteParentInterfaceProperty
    ] .

:ConvertibleTypePropertiesClass
    a owl:Class, sh:NodeShape ;
    rdfs:comment "Node shape with properties whose types are convertible from other types on construction e.g., string to IRI." ;
    sh:property [
        sh:minCount 1 ;
        sh:nodeKind sh:Literal ;
        sh:path :convertibleLiteralNonEmptySetProperty
    ], [
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :convertibleTermProperty
    ], [
        sh:maxCount 1 ;
        sh:path :convertibleTermOptionProperty
    ], [
        sh:path :convertibleTermSetProperty
    ], [
        sh:minCount 1 ;
        sh:path :convertibleTermNonEmptySetProperty
    ], [
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:nodeKind sh:IRI ;
        sh:path :convertibleIriProperty
    ], [
        sh:maxCount 1 ;
        sh:nodeKind sh:IRI ;
        sh:path :convertibleIriOptionProperty
    ], [
        sh:nodeKind sh:IRI ;
        sh:path :convertibleIriSetProperty
    ], [
        sh:minCount 1 ;
        sh:nodeKind sh:IRI ;
        sh:path :convertibleIriNonEmptySetProperty
    ], [
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:nodeKind sh:Literal ;
        sh:path :convertibleLiteralProperty
    ], [
        sh:maxCount 1 ;
        sh:nodeKind sh:Literal ;
        sh:path :convertibleLiteralOptionProperty
    ], [
        sh:nodeKind sh:Literal ;
        sh:path :convertibleLiteralSetProperty
    ] .

:DefaultValuePropertiesClass
    shaclmate:identifierMintingStrategy shaclmate:_IdentifierMintingStrategy_SHA256 ;
    a sh:NodeShape ;
    rdfs:comment "Shape with sh:defaultValue properties." ;
    sh:property [
        sh:defaultValue "" ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :stringDefaultValueProperty
    ], [
        sh:defaultValue true ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :trueBooleanDefaultValueProperty
    ], [
        sh:defaultValue false ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :falseBooleanDefaultValueProperty
    ], [
        sh:defaultValue "2018-04-09"^^xsd:date ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :dateDefaultValueProperty
    ], [
        sh:defaultValue "2018-04-09T10:00:00Z"^^xsd:dateTime ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :dateTimeDefaultValueProperty
    ], [
        sh:defaultValue 0 ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :numberDefaultValueProperty
    ] .

:DirectRecursiveClass
    a sh:NodeShape ;
    sh:property [
        sh:maxCount 1 ;
        sh:node :DirectRecursiveClass ;
        sh:path :directRecursiveProperty
    ] .

:ExplicitFromToRdfTypesClass
    shaclmate:fromRdfType :FromRdfType ;
    shaclmate:toRdfType :ToRdfType ;
    a owl:Class, sh:NodeShape ;
    rdfs:comment """Shape with custom rdf:type's.

The shaclmate:fromRdfType is expected on deserialization.
shaclmate:toRdfType's are added an serialization.""" ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :explicitFromToRdfTypesProperty
    ] .

:ExplicitRdfTypeClass
    shaclmate:rdfType :RdfType ;
    a owl:Class, sh:NodeShape ;
    rdfs:comment """Shape with custom rdf:type's.

The shaclmate:rdfType is expected on deserialization and added on serialization.""" ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :explicitRdfTypeProperty
    ] .

:ExternClass
    shaclmate:extern true ;
    shaclmate:tsFeatureExclude shaclmate:_TsFeature_Sparql ;
    shaclmate:tsImport "import { ExternClass } from \"./ExternClass.js\";" ;
    a sh:NodeShape ;
    rdfs:comment "An extern object type in TypeScript" ;
    rdfs:subClassOf :AbstractBaseClassForExternClass .

:ExternClassPropertyClass
    a sh:NodeShape ;
    rdfs:comment "Node shape that references the ExternClass in a property." ;
    sh:property [
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:node :ExternClass ;
        sh:path :externClassProperty
    ] .

:HasValuePropertiesClass
    a sh:NodeShape ;
    rdfs:comment "Shape with sh:hasValue properties." ;
    sh:property [
        sh:hasValue :HasValuePropertiesClassIri1 ;
        sh:maxCount 1 ;
        sh:path :hasIriValueProperty
    ], [
        sh:hasValue "test" ;
        sh:maxCount 1 ;
        sh:path :hasLiteralValueProperty
    ] .

:InIdentifierClass
    a sh:NodeShape ;
    rdfs:comment "Shape with sh:in constraining its identifier." ;
    sh:in (:InIdentifierInstance1
        :InIdentifierInstance2
    ) ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:path :inIdentifierProperty
    ] .

:InPropertiesClass
    a sh:NodeShape ;
    rdfs:comment "Shape with sh:in properties." ;
    sh:property [
        sh:in (true
        ) ;
        sh:maxCount 1 ;
        sh:path :inBooleansProperty
    ], [
        sh:in ("2018-04-09T10:00:00Z"^^xsd:dateTime
        ) ;
        sh:maxCount 1 ;
        sh:path :inDateTimesProperty
    ], [
        sh:in (:InPropertiesIri1
            :InPropertiesIri2
        ) ;
        sh:maxCount 1 ;
        sh:path :inIrisProperty
    ], [
        sh:in (1
            2
        ) ;
        sh:maxCount 1 ;
        sh:path :inNumbersProperty
    ], [
        sh:in ("text"
            "html"
        ) ;
        sh:maxCount 1 ;
        sh:path :inStringsProperty
    ] .

:IndirectRecursiveClass
    a sh:NodeShape ;
    sh:property [
        sh:maxCount 1 ;
        sh:node :IndirectRecursiveHelperClass ;
        sh:path :indirectRecursiveHelperProperty
    ] .

:IndirectRecursiveHelperClass
    a sh:NodeShape ;
    sh:property [
        sh:maxCount 1 ;
        sh:node :IndirectRecursiveClass ;
        sh:path :indirectRecursiveProperty
    ] .

:Interface
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a sh:NodeShape ;
    rdfs:comment "A node shape that's generated as a TypeScript interface instead of a class." ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :interfaceProperty
    ] .

:InterfaceUnion
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a sh:NodeShape ;
    rdfs:comment "Node shape that sh:xone's other node shapes. This will usually be generated as a discriminated union." ;
    sh:xone (:InterfaceUnionMember1
        :InterfaceUnionMember2
    ) .

:InterfaceUnionMember1
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a sh:NodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :interfaceUnionMember1Property
    ] .

:InterfaceUnionMember2
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a sh:NodeShape ;
    rdfs:comment "A union node shape that is part of another union shape, to test composition of unions." ;
    sh:xone (:InterfaceUnionMember2a
        :InterfaceUnionMember2b
    ) .

:InterfaceUnionMember2a
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a sh:NodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :interfaceUnionMember2aProperty
    ] .

:InterfaceUnionMember2b
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a sh:NodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :interfaceUnionMember2bProperty
    ] .

:IriClass
    a sh:NodeShape ;
    rdfs:comment "A node shape that only allows IRI identifiers." ;
    sh:nodeKind sh:IRI .

:IriList
    a owl:Class, sh:NodeShape ;
    rdfs:comment "A node shape that models an RDF list. Should be transformed into a list data structure when used as a property instead of surfacing the RDF list structure in code." ;
    rdfs:subClassOf rdf:List ;
    sh:nodeKind sh:BlankNodeOrIRI ;
    sh:property :IriList-first, :IriList-rest .

:IriList-first
    a sh:PropertyShape ;
    sh:maxCount 1 ;
    sh:minCount 1 ;
    sh:nodeKind sh:IRI ;
    sh:path rdf:first .

:IriList-rest
    a sh:PropertyShape ;
    sh:maxCount 1 ;
    sh:minCount 1 ;
    sh:path rdf:rest ;
    sh:xone ([
            sh:class :IriList
        ]
        [
            sh:hasValue ( )
        ]
    ) .

:LanguageInPropertiesClass
    a sh:NodeShape ;
    rdfs:comment "Shape that uses the StringList in a property." ;
    sh:property [
        rdfs:comment "literal property for testing languageIn" ;
        sh:languageIn ("en"
            "fr"
        ) ;
        sh:minCount 1 ;
        sh:path :languageInLiteralProperty
    ], [
        rdfs:comment "string property for testing languageIn; must have '' as an acceptable languageIn since that's how it will be serialized to RDF" ;
        sh:datatype xsd:string ;
        sh:languageIn (""
            "en"
            "fr"
        ) ;
        sh:minCount 1 ;
        sh:path :languageInStringProperty
    ] .

:LazilyResolvedBlankNodeOrIriClass
    a owl:Class, sh:NodeShape ;
    rdfs:comment "Node shape resolved by LazyPropertiesClass" ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :lazilyResolvedStringProperty
    ] .

:LazilyResolvedBlankNodeOrIriInterface
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a owl:Class, sh:NodeShape ;
    rdfs:comment "Node shape resolved by LazyPropertiesInterface" ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :lazilyResolvedStringProperty
    ] .

:LazilyResolvedClassUnion
    a sh:NodeShape ;
    rdfs:comment "Node shape sh:xone's other node shapes. This will usually be generated as a discriminated union." ;
    sh:xone (:LazilyResolvedClassUnionMember1
        :LazilyResolvedClassUnionMember2
    ) .

:LazilyResolvedClassUnionMember1
    a owl:Class, sh:NodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :lazilyResolvedStringProperty
    ] .

:LazilyResolvedClassUnionMember2
    a owl:Class, sh:NodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :lazilyResolvedStringProperty
    ] .

:LazilyResolvedInterfaceUnion
    a sh:NodeShape ;
    rdfs:comment "Node shape sh:xone's other node shapes. This will usually be generated as a discriminated union." ;
    sh:xone (:LazilyResolvedInterfaceUnionMember1
        :LazilyResolvedInterfaceUnionMember2
    ) .

:LazilyResolvedInterfaceUnionMember1
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a owl:Class, sh:NodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :lazilyResolvedStringProperty
    ] .

:LazilyResolvedInterfaceUnionMember2
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a owl:Class, sh:NodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :lazilyResolvedStringProperty
    ] .

:LazilyResolvedIriClass
    a sh:NodeShape ;
    rdfs:comment "Node shape resolved by LazyPropertiesClass" ;
    sh:nodeKind sh:IRI ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :lazilyResolvedStringProperty
    ] .

:LazilyResolvedIriInterface
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a sh:NodeShape ;
    rdfs:comment "Node shape resolved by LazyPropertiesInterface" ;
    sh:nodeKind sh:IRI ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :lazilyResolvedStringProperty
    ] .

:LazyPropertiesClass
    a sh:NodeShape ;
    rdfs:comment "Node shape that has lazy properties." ;
    sh:property [
        shaclmate:lazy true ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:node :LazilyResolvedBlankNodeOrIriClass ;
        sh:path :optionalLazyToResolvedClassProperty
    ], [
        shaclmate:lazy true ;
        sh:node :LazilyResolvedBlankNodeOrIriClass ;
        sh:path :setLazyToResolvedClassProperty
    ], [
        shaclmate:lazy true ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:node :LazilyResolvedBlankNodeOrIriClass ;
        sh:path :requiredLazyToResolvedClassProperty
    ], [
        shaclmate:lazy true ;
        sh:maxCount 1 ;
        sh:node :LazilyResolvedIriClass ;
        sh:path :optionalLazyToResolvedIriClassProperty
    ], [
        shaclmate:lazy true ;
        sh:maxCount 1 ;
        sh:node :LazilyResolvedClassUnion ;
        sh:path :optionalLazyToResolvedClassUnionProperty
    ], [
        shaclmate:stub :StubClass ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:node :LazilyResolvedBlankNodeOrIriClass ;
        sh:path :optionalStubClassToResolvedClassProperty
    ], [
        shaclmate:stub :StubClass ;
        sh:node :LazilyResolvedBlankNodeOrIriClass ;
        sh:path :setStubClassToResolvedClassProperty
    ], [
        shaclmate:stub :StubClass ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:node :LazilyResolvedBlankNodeOrIriClass ;
        sh:path :requiredStubClassToResolvedClassProperty
    ], [
        shaclmate:stub :StubClass ;
        sh:maxCount 1 ;
        sh:node :LazilyResolvedClassUnion ;
        sh:path :optionalStubClassToResolvedClassUnionProperty
    ], [
        shaclmate:stub :StubClassUnion ;
        sh:maxCount 1 ;
        sh:node :LazilyResolvedClassUnion ;
        sh:path :optionalStubClassUnionToResolvedClassUnionProperty
    ] .

:LazyPropertiesInterface
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a sh:NodeShape ;
    rdfs:comment "Node shape that has lazy properties." ;
    sh:property [
        shaclmate:lazy true ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:node :LazilyResolvedBlankNodeOrIriInterface ;
        sh:path :requiredLazyToResolvedInterfaceProperty
    ], [
        shaclmate:lazy true ;
        sh:maxCount 1 ;
        sh:node :LazilyResolvedIriInterface ;
        sh:path :optionalLazyToResolvedIriInterfaceProperty
    ], [
        shaclmate:lazy true ;
        sh:maxCount 1 ;
        sh:node :LazilyResolvedInterfaceUnion ;
        sh:path :optionalLazyToResolvedInterfaceUnionProperty
    ], [
        shaclmate:stub :StubInterface ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:node :LazilyResolvedBlankNodeOrIriInterface ;
        sh:path :optionalStubInterfaceToResolvedInterfaceProperty
    ], [
        shaclmate:stub :StubInterface ;
        sh:node :LazilyResolvedBlankNodeOrIriInterface ;
        sh:path :setStubInterfaceToResolvedInterfaceProperty
    ], [
        shaclmate:stub :StubInterface ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:node :LazilyResolvedBlankNodeOrIriInterface ;
        sh:path :requiredStubInterfaceToResolvedInterfaceProperty
    ], [
        shaclmate:stub :StubInterface ;
        sh:maxCount 1 ;
        sh:node :LazilyResolvedInterfaceUnion ;
        sh:path :optionalStubInterfaceToResolvedInterfaceUnionProperty
    ], [
        shaclmate:stub :StubInterfaceUnion ;
        sh:maxCount 1 ;
        sh:node :LazilyResolvedInterfaceUnion ;
        sh:path :optionalStubInterfaceUnionToResolvedInterfaceUnionProperty
    ], [
        shaclmate:lazy true ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:node :LazilyResolvedBlankNodeOrIriInterface ;
        sh:path :optionalLazyToResolvedInterfaceProperty
    ], [
        shaclmate:lazy true ;
        sh:node :LazilyResolvedBlankNodeOrIriInterface ;
        sh:path :setLazyToResolvedInterfaceProperty
    ] .

:ListPropertiesClass
    a sh:NodeShape ;
    rdfs:comment "Shape that uses the list shapes in properties." ;
    sh:property [
        sh:maxCount 1 ;
        sh:node :ObjectList ;
        sh:path :objectListProperty
    ], [
        sh:maxCount 1 ;
        sh:node :IriList ;
        sh:path :iriListProperty
    ], [
        sh:maxCount 1 ;
        sh:node :StringList ;
        sh:path :stringListProperty
    ] .

:MutablePropertiesClass
    shaclmate:identifierMintingStrategy shaclmate:_IdentifierMintingStrategy_SHA256 ;
    a sh:NodeShape ;
    rdfs:comment "Shape with shaclmate:mutable properties." ;
    sh:property [
        shaclmate:mutable true ;
        sh:datatype xsd:string ;
        sh:description "String-valued property that can be re-assigned" ;
        sh:maxCount 1 ;
        sh:path :mutableStringProperty
    ], [
        sh:description "List-valued property that can't be reassigned but whose value can be mutated" ;
        sh:maxCount 1 ;
        sh:node :MutableStringList ;
        sh:path :mutableListProperty
    ], [
        shaclmate:mutable true ;
        sh:datatype xsd:string ;
        sh:description "Set-valued property that can't be reassigned but whose value can be mutated" ;
        sh:path :mutableSetProperty
    ] .

:MutableStringList
    shaclmate:mutable true ;
    a owl:Class, sh:NodeShape ;
    rdfs:subClassOf rdf:List ;
    sh:nodeKind sh:BlankNodeOrIRI ;
    sh:property :MutableStringList-first, :MutableStringList-rest .

:MutableStringList-first
    a sh:PropertyShape ;
    sh:datatype xsd:string ;
    sh:maxCount 1 ;
    sh:minCount 1 ;
    sh:path rdf:first .

:MutableStringList-rest
    a sh:PropertyShape ;
    sh:maxCount 1 ;
    sh:minCount 1 ;
    sh:path rdf:rest ;
    sh:xone ([
            sh:class :MutableStringList
        ]
        [
            sh:hasValue ( )
        ]
    ) .

:NonClass
    a sh:NodeShape ;
    rdfs:comment "Node shape that isn't an rdfs:Class." ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :nonClassProperty
    ] .

:ObjectList
    a owl:Class, sh:NodeShape ;
    rdfs:comment "A node shape that models an RDF list. Should be transformed into a list data structure when used as a property instead of surfacing the RDF list structure in code." ;
    rdfs:subClassOf rdf:List ;
    sh:nodeKind sh:BlankNodeOrIRI ;
    sh:property :ObjectList-first, :ObjectList-rest .

:ObjectList-first
    a sh:PropertyShape ;
    sh:maxCount 1 ;
    sh:minCount 1 ;
    sh:node :NonClass ;
    sh:path rdf:first .

:ObjectList-rest
    a sh:PropertyShape ;
    sh:maxCount 1 ;
    sh:minCount 1 ;
    sh:path rdf:rest ;
    sh:xone ([
            sh:class :ObjectList
        ]
        [
            sh:hasValue ( )
        ]
    ) .

:OrderedPropertiesClass
    a sh:NodeShape ;
    rdfs:comment "Shape whose sh:properties have sh:order's. The compiler should order them C, A, B based on sh:order instead of on the declaration or lexicographic orders." ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:order 1 ;
        sh:path :orderedPropertyC
    ], [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:order 3 ;
        sh:path :orderedPropertyA
    ], [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:order 2 ;
        sh:path :orderedPropertyB
    ] .

:PropertyCardinalitiesClass
    a sh:NodeShape ;
    rdfs:comment "Shape that has properties with different cardinalities" ;
    sh:property [
        rdfs:comment "Required: maxCount=minCount=1" ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :requiredStringProperty
    ], [
        rdfs:comment "Option: maxCount=1, minCount=0" ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:path :optionalStringProperty
    ], [
        rdfs:comment "Set: minCount implicitly=0, no maxCount" ;
        sh:datatype xsd:string ;
        sh:path :emptyStringSetProperty
    ], [
        rdfs:comment "Set: minCount=1, no maxCount" ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:path :nonEmptyStringSetProperty
    ] .

:PropertyVisibilitiesClass
    a sh:NodeShape ;
    rdfs:comment "Shape with properties that have visibility modifiers (private, protected, public)" ;
    sh:property [
        shaclmate:visibility shaclmate:_Visibility_Protected ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :protectedProperty
    ], [
        shaclmate:visibility shaclmate:_Visibility_Private ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :privateProperty
    ], [
        shaclmate:visibility shaclmate:_Visibility_Public ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :publicProperty
    ] .

:Sha256IriClass
    shaclmate:identifierMintingStrategy shaclmate:_IdentifierMintingStrategy_SHA256 ;
    a sh:NodeShape ;
    rdfs:comment "A node shape that mints its identifier by hashing (other) contents, if no identifier is supplied." ;
    sh:nodeKind sh:IRI ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :sha256IriProperty
    ] .

:StringList
    a owl:Class, sh:NodeShape ;
    rdfs:comment "A node shape that models an RDF list. Should be transformed into a list data structure when used as a property instead of surfacing the RDF list structure in code." ;
    rdfs:subClassOf rdf:List ;
    sh:nodeKind sh:BlankNodeOrIRI ;
    sh:property :StringList-first, :StringList-rest .

:StringList-first
    a sh:PropertyShape ;
    sh:datatype xsd:string ;
    sh:maxCount 1 ;
    sh:minCount 1 ;
    sh:path rdf:first .

:StringList-rest
    a sh:PropertyShape ;
    sh:maxCount 1 ;
    sh:minCount 1 ;
    sh:path rdf:rest ;
    sh:xone ([
            sh:class :StringList
        ]
        [
            sh:hasValue ( )
        ]
    ) .

:StubClass
    a sh:NodeShape ;
    rdfs:comment "Node shape used as a stub by LazyPropertiesClass" ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :lazilyResolvedStringProperty
    ] .

:StubClassUnion
    a sh:NodeShape ;
    rdfs:comment "Node shape sh:xone's other node shapes. This will usually be generated as a discriminated union." ;
    sh:xone (:StubClassUnionMember1
        :StubClassUnionMember2
    ) .

:StubClassUnionMember1
    a owl:Class, sh:NodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :lazilyResolvedStringProperty
    ] .

:StubClassUnionMember2
    a owl:Class, sh:NodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :lazilyResolvedStringProperty
    ] .

:StubInterface
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a sh:NodeShape ;
    rdfs:comment "Node shape used as a stub by LazyPropertiesInterface" ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :lazilyResolvedStringProperty
    ] .

:StubInterfaceUnion
    a sh:NodeShape ;
    rdfs:comment "Node shape sh:xone's other node shapes. This will usually be generated as a discriminated union." ;
    sh:xone (:StubInterfaceUnionMember1
        :StubInterfaceUnionMember2
    ) .

:StubInterfaceUnionMember1
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a owl:Class, sh:NodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :lazilyResolvedStringProperty
    ] .

:StubInterfaceUnionMember2
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a owl:Class, sh:NodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :lazilyResolvedStringProperty
    ] .

:TermPropertiesClass
    a sh:NodeShape ;
    rdfs:comment "Shape with properties that are not nested objects" ;
    sh:property [
        sh:datatype xsd:boolean ;
        sh:maxCount 1 ;
        sh:path :booleanTermProperty
    ], [
        sh:datatype xsd:date ;
        sh:maxCount 1 ;
        sh:path :dateTermProperty
    ], [
        sh:datatype xsd:dateTime ;
        sh:maxCount 1 ;
        sh:path :dateTimeTermProperty
    ], [
        sh:maxCount 1 ;
        sh:nodeKind sh:IRI ;
        sh:path :iriTermProperty
    ], [
        sh:maxCount 1 ;
        sh:nodeKind sh:Literal ;
        sh:path :literalTermProperty
    ], [
        sh:datatype xsd:decimal ;
        sh:maxCount 1 ;
        sh:path :numberTermProperty
    ], [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:path :stringTermProperty
    ], [
        sh:maxCount 1 ;
        sh:path :termProperty
    ] .

:UnionPropertiesClass
    a sh:NodeShape ;
    rdfs:comment "Shape with sh:xone properties." ;
    sh:property [
        sh:maxCount 1 ;
        sh:path :unrelatedTypesProperty ;
        sh:xone ([
                sh:datatype xsd:integer
            ]
            [
                sh:node :NonClass
            ]
        )
    ], [
        shaclmate:widen false ;
        sh:maxCount 1 ;
        sh:path :narrowLiteralsProperty ;
        sh:xone ([
                sh:datatype xsd:integer
            ]
            [
                sh:datatype xsd:string
            ]
        )
    ], [
        sh:maxCount 1 ;
        sh:path :widenedLiteralsProperty ;
        sh:xone ([
                sh:datatype xsd:integer
            ]
            [
                sh:datatype xsd:string
            ]
        )
    ], [
        sh:maxCount 1 ;
        sh:path :widenedTermsProperty ;
        sh:xone ([
                sh:nodeKind sh:Literal
            ]
            [
                sh:nodeKind sh:IRI
            ]
        )
    ] .

:UuidV4IriClass
    shaclmate:identifierMintingStrategy shaclmate:_IdentifierMintingStrategy_UUIDv4 ;
    a sh:NodeShape ;
    rdfs:comment "A node shape that mints its identifier by generating a v4 UUID, if no identifier is supplied." ;
    sh:nodeKind sh:IRI ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :uuidV4IriProperty
    ] .

:UuidV4IriInterface
    shaclmate:identifierMintingStrategy shaclmate:_IdentifierMintingStrategy_UUIDv4 ;
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a sh:NodeShape ;
    rdfs:comment "A node shape that mints its identifier by generating a v4 UUID, if no identifier is supplied." ;
    sh:nodeKind sh:IRI ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:path :uuidV4IriProperty
    ] .

