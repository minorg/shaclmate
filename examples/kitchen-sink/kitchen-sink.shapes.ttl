@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix : <http://example.com/> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shaclmate: <http://minorg.github.io/shaclmate/ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://example.com/>
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Class ;
    a owl:Ontology .

:AbstractBaseClassForExternObjectType
    shaclmate:abstract true ;
    shaclmate:name "AbstractBaseClassForExternObjectType" ;
    a owl:Class, sh:NodeShape ;
    rdfs:comment "An abstract base class that will be inherited by the extern object type, showing how to mix generated and hand-written code." ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "abcStringProperty" ;
        sh:path :abcStringProperty
    ] .

:AbstractBaseClassWithPropertiesNodeShape
    shaclmate:abstract true ;
    shaclmate:export false ;
    shaclmate:mintingStrategy shaclmate:_MintingStrategy_SHA256 ;
    shaclmate:name "AbstractBaseClassWithPropertiesNodeShape" ;
    a owl:Class, sh:NodeShape ;
    rdfs:comment """Node shape that serves as an abstract base class for child node shapes.

It's marked abstract in TypeScript and not exported from the module.

Common pattern: put the minting strategy and nodeKind on an ABC.
""" ;
    sh:nodeKind sh:BlankNodeOrIRI ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "abcStringProperty" ;
        sh:path :abcStringProperty
    ] .

:AbstractBaseClassWithoutPropertiesNodeShape
    shaclmate:abstract true ;
    shaclmate:export false ;
    shaclmate:name "AbstractBaseClassWithoutPropertiesNodeShape" ;
    a owl:Class, sh:NodeShape ;
    rdfs:comment "Abstract base for other node shapes. Put the ABC with properties above the ABC without." ;
    rdfs:subClassOf :AbstractBaseClassWithPropertiesNodeShape .

:ConcreteChildClassNodeShape
    shaclmate:name "ConcreteChildClassNodeShape" ;
    a owl:Class, sh:NodeShape ;
    rdfs:comment "Child (class) of ParentClassNodeShape. Should inherit properties, node kinds, and minting strategy." ;
    rdfs:subClassOf :ConcreteParentClassNodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "childStringProperty" ;
        sh:path :childStringProperty
    ] .

:ConcreteParentClassNodeShape
    shaclmate:name "ConcreteParentClassNodeShape" ;
    a owl:Class, sh:NodeShape ;
    rdfs:comment "Class node shape that inherits the abstract base class and is the parent of the ChildClassNodeShape." ;
    rdfs:subClassOf :AbstractBaseClassWithoutPropertiesNodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "parentStringProperty" ;
        sh:path :parentStringProperty
    ] .

:ExternObjectType
    shaclmate:extern true ;
    shaclmate:name "ExternObjectType" ;
    shaclmate:tsImport "import { ExternObjectType } from \"./ExternObjectType.js\";" ;
    a sh:NodeShape ;
    rdfs:comment "An extern object type in TypeScript" ;
    rdfs:subClassOf :AbstractBaseClassForExternObjectType .

:InterfaceNodeShape
    shaclmate:name "InterfaceNodeShape" ;
    shaclmate:tsObjectDeclarationType shaclmate:_TsObjectDeclarationType_Interface ;
    a sh:NodeShape ;
    rdfs:comment "A node shape that's generated as a TypeScript interface instead of a class." ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "stringProperty" ;
        sh:path :stringProperty
    ] .

:IriNodeShape
    shaclmate:name "IriNodeShape" ;
    a sh:NodeShape ;
    rdfs:comment "A node shape that only allows IRI identifiers." ;
    sh:nodeKind sh:IRI ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "stringProperty" ;
        sh:path :stringProperty
    ] .

:ListShape
    shaclmate:name "ListShape" ;
    a owl:Class, sh:NodeShape ;
    rdfs:comment "A node shape that models an RDF list. Should be transformed into a list data structure when used as a property instead of surfacing the RDF list structure in code." ;
    rdfs:subClassOf rdf:List ;
    sh:nodeKind sh:BlankNodeOrIRI ;
    sh:property :ListShape-first, :ListShape-rest .

:ListShape-first
    a sh:PropertyShape ;
    sh:datatype xsd:string ;
    sh:maxCount 1 ;
    sh:minCount 1 ;
    sh:name "first" ;
    sh:path rdf:first .

:ListShape-rest
    a sh:PropertyShape ;
    sh:maxCount 1 ;
    sh:minCount 1 ;
    sh:name "rest" ;
    sh:or ([
            sh:class :ListShape
        ]
        [
            sh:hasValue ( )
        ]
    ) ;
    sh:path rdf:rest .

:MutableListShape
    shaclmate:mutable true ;
    shaclmate:name "MutableListShape" ;
    a owl:Class, sh:NodeShape ;
    rdfs:subClassOf rdf:List ;
    sh:nodeKind sh:BlankNodeOrIRI ;
    sh:property :MutableListShape-first, :MutableListShape-rest .

:MutableListShape-first
    a sh:PropertyShape ;
    sh:datatype xsd:string ;
    sh:maxCount 1 ;
    sh:minCount 1 ;
    sh:name "first" ;
    sh:path rdf:first .

:MutableListShape-rest
    a sh:PropertyShape ;
    sh:maxCount 1 ;
    sh:minCount 1 ;
    sh:name "rest" ;
    sh:or ([
            sh:class :MutableListShape
        ]
        [
            sh:hasValue ( )
        ]
    ) ;
    sh:path rdf:rest .

:NodeShapeWithDefaultValueProperties
    shaclmate:mintingStrategy shaclmate:_MintingStrategy_SHA256 ;
    shaclmate:name "NodeShapeWithDefaultValueProperties" ;
    a sh:NodeShape ;
    rdfs:comment "Shape with sh:defaultValue properties." ;
    sh:property [
        sh:defaultValue false ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "falseBooleanProperty" ;
        sh:path :falseBooleanProperty
    ], [
        sh:defaultValue "2018-04-09T10:00:00Z"^^xsd:dateTime ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "dateTimeProperty" ;
        sh:path :dateTimeProperty
    ], [
        sh:defaultValue 0 ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "numberProperty" ;
        sh:path :numberProperty
    ], [
        sh:defaultValue "" ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "stringProperty" ;
        sh:path :stringProperty
    ], [
        sh:defaultValue true ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "trueBooleanProperty" ;
        sh:path :trueBooleanProperty
    ] .

:NodeShapeWithExplicitRdfTypes
    shaclmate:fromRdfType :FromRdfType ;
    shaclmate:name "NodeShapeWithExplicitRdfTypes" ;
    shaclmate:toRdfType :ToRdfType ;
    a owl:Class, sh:NodeShape ;
    rdfs:comment """Shape with custom rdf:type's.

The shaclmate:fromRdfType is expected on deserialization.
shaclmate:toRdfType's are added an serialization.""" ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "stringProperty" ;
        sh:path :stringProperty
    ] .

:NodeShapeWithExternProperties
    shaclmate:name "NodeShapeWithExternProperties" ;
    a sh:NodeShape ;
    rdfs:comment "Node shape that inlines/nests another node shape and externs/references another." ;
    sh:property [
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:name "externObjectTypeProperty" ;
        sh:node :ExternObjectType ;
        sh:path :externObjectTypeProperty
    ], [
        shaclmate:extern true ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:name "externProperty" ;
        sh:node :NodeShapeWithExternProperties-ExternNodeShape ;
        sh:path :externProperty
    ], [
        shaclmate:extern false ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:name "inlineProperty" ;
        sh:node :NodeShapeWithExternProperties-InlineNodeShape ;
        sh:path :inlineProperty
    ] .

:NodeShapeWithExternProperties-ExternNodeShape
    shaclmate:name "ExternNodeShape" ;
    a sh:NodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "stringProperty" ;
        sh:path :stringProperty
    ] .

:NodeShapeWithExternProperties-InlineNodeShape
    shaclmate:name "InlineNodeShape" ;
    a sh:NodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "stringProperty" ;
        sh:path :stringProperty
    ] .

:NodeShapeWithHasValueProperties
    shaclmate:name "NodeShapeWithHasValueProperties" ;
    a sh:NodeShape ;
    rdfs:comment "Shape with sh:hasValue properties." ;
    sh:property [
        sh:hasValue :NodeShapeWithHasValuePropertiesIri1 ;
        sh:maxCount 1 ;
        sh:name "hasIriProperty" ;
        sh:path :hasIriProperty
    ], [
        sh:hasValue "test" ;
        sh:maxCount 1 ;
        sh:name "hasLiteralProperty" ;
        sh:path :hasLiteralProperty
    ] .

:NodeShapeWithInProperties
    shaclmate:name "NodeShapeWithInProperties" ;
    a sh:NodeShape ;
    rdfs:comment "Shape with sh:in properties." ;
    sh:property [
        sh:in (true
        ) ;
        sh:maxCount 1 ;
        sh:name "inBooleansProperty" ;
        sh:path :inBooleansProperty
    ], [
        sh:in ("2018-04-09T10:00:00Z"^^xsd:dateTime
        ) ;
        sh:maxCount 1 ;
        sh:name "inDateTimesProperty" ;
        sh:path :inDateTimesProperty
    ], [
        sh:in (:NodeShapeWithInPropertiesIri1
            :NodeShapeWithInPropertiesIri2
        ) ;
        sh:maxCount 1 ;
        sh:name "inIrisProperty" ;
        sh:path :inIrisProperty
    ], [
        sh:in (1
            2
        ) ;
        sh:maxCount 1 ;
        sh:name "inNumbersProperty" ;
        sh:path :inNumbersProperty
    ], [
        sh:in ("text"
            "html"
        ) ;
        sh:maxCount 1 ;
        sh:name "inStringsProperty" ;
        sh:path :inStringsProperty
    ] .

:NodeShapeWithLanguageInProperties
    shaclmate:name "NodeShapeWithLanguageInProperties" ;
    a sh:NodeShape ;
    rdfs:comment "Shape that uses the ListShape in a property." ;
    sh:property [
        sh:languageIn ("en"
            "fr"
        ) ;
        sh:maxCount 1 ;
        sh:name "languageInProperty" ;
        sh:path :languageInProperty
    ], [
        rdfs:comment "literal property for testing runtime languageIn" ;
        sh:maxCount 1 ;
        sh:name "literalProperty" ;
        sh:nodeKind sh:Literal ;
        sh:path :literalProperty
    ] .

:NodeShapeWithListProperty
    shaclmate:name "NodeShapeWithListProperty" ;
    a sh:NodeShape ;
    rdfs:comment "Shape that uses the ListShape in a property." ;
    sh:property [
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "listProperty" ;
        sh:node :ListShape ;
        sh:path :listProperty
    ] .

:NodeShapeWithMutableProperties
    shaclmate:mintingStrategy shaclmate:_MintingStrategy_SHA256 ;
    shaclmate:name "NodeShapeWithMutableProperties" ;
    a sh:NodeShape ;
    rdfs:comment "Shape with shaclmate:mutable properties." ;
    sh:property [
        shaclmate:mutable true ;
        sh:datatype xsd:string ;
        sh:description "String-valued property that can be re-assigned" ;
        sh:maxCount 1 ;
        sh:name "mutableStringProperty" ;
        sh:path :mutableStringProperty
    ], [
        sh:description "List-valued property that can't be reassigned but whose value can be mutated" ;
        sh:maxCount 1 ;
        sh:name "mutableListProperty" ;
        sh:node :MutableListShape ;
        sh:path :mutableListProperty
    ] .

:NodeShapeWithOrProperties
    shaclmate:name "NodeShapeWithOrProperties" ;
    a sh:NodeShape ;
    rdfs:comment "Shape with sh:or properties." ;
    sh:property [
        sh:maxCount 1 ;
        sh:name "orLiteralsProperty" ;
        sh:or ([
                sh:datatype xsd:integer
            ]
            [
                sh:datatype xsd:string
            ]
        ) ;
        sh:path :orLiteralsProperty
    ], [
        sh:maxCount 1 ;
        sh:name "orTermsProperty" ;
        sh:or ([
                sh:nodeKind sh:Literal
            ]
            [
                sh:nodeKind sh:IRI
            ]
        ) ;
        sh:path :orTermsProperty
    ], [
        sh:maxCount 1 ;
        sh:name "orUnrelatedProperty" ;
        sh:or ([
                sh:datatype xsd:integer
            ]
            [
                sh:nodeKind sh:IRI
            ]
        ) ;
        sh:path :orUnrelatedProperty
    ] .

:NodeShapeWithPropertyCardinalities
    shaclmate:name "NodeShapeWithPropertyCardinalities" ;
    a sh:NodeShape ;
    rdfs:comment "Shape that has properties with different cardinalities" ;
    sh:property [
        rdfs:comment "Required: maxCount=minCount=1" ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "requiredStringProperty" ;
        sh:path :requiredStringProperty
    ], [
        rdfs:comment "Option: maxCount=1 minCount=0" ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:name "optionalStringProperty" ;
        sh:path :optionalStringProperty
    ], [
        rdfs:comment "Set: minCount implicitly=0, no maxCount or maxCount > 1" ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:name "setStringProperty" ;
        sh:path :setStringProperty
    ] .

:NodeShapeWithPropertyVisibilities
    shaclmate:name "NodeShapeWithPropertyVisibilities" ;
    a sh:NodeShape ;
    rdfs:comment "Shape with properties that have visibility modifiers (private, protected, public)" ;
    sh:property [
        shaclmate:visibility shaclmate:_Visibility_Protected ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "protectedProperty" ;
        sh:path :protectedProperty
    ], [
        shaclmate:visibility shaclmate:_Visibility_Private ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "privateProperty" ;
        sh:path :privateProperty
    ], [
        shaclmate:visibility shaclmate:_Visibility_Public ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "publicProperty" ;
        sh:path :publicProperty
    ] .

:NonClassNodeShape
    shaclmate:name "NonClassNodeShape" ;
    a sh:NodeShape ;
    rdfs:comment "Node shape that isn't an rdfs:Class." ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "stringProperty" ;
        sh:path :stringProperty
    ] .

:OrNodeShape
    shaclmate:name "OrNodeShape" ;
    a sh:NodeShape ;
    rdfs:comment "Node that that sh:or's other node shapes. This will usually be generated as a discriminated union." ;
    sh:or (:OrNodeShapeMember1
        :OrNodeShapeMember2
        :ExternObjectType
    ) .

:OrNodeShapeMember1
    shaclmate:name "OrNodeShapeMember1" ;
    a sh:NodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "stringProperty1" ;
        sh:path :stringProperty1
    ] .

:OrNodeShapeMember2
    shaclmate:name "OrNodeShapeMember2" ;
    a sh:NodeShape ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "stringProperty2" ;
        sh:path :stringProperty2
    ] .

:Sha256IriNodeShape
    shaclmate:mintingStrategy shaclmate:_MintingStrategy_SHA256 ;
    shaclmate:name "Sha256IriNodeShape" ;
    a sh:NodeShape ;
    rdfs:comment "A node shape that mints its identifier by hashing (other) contents, if no identifier is supplied." ;
    sh:nodeKind sh:IRI ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "stringProperty" ;
        sh:path :stringProperty
    ] .

:UuidV4IriNodeShape
    shaclmate:mintingStrategy shaclmate:_MintingStrategy_UUIDv4 ;
    shaclmate:name "UuidV4IriNodeShape" ;
    a sh:NodeShape ;
    rdfs:comment "A node shape that mints its identifier by generating a v4 UUID, if no identifier is supplied." ;
    sh:nodeKind sh:IRI ;
    sh:property [
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:minCount 1 ;
        sh:name "stringProperty" ;
        sh:path :stringProperty
    ] .

